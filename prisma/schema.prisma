// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]     // Courses they created (instructors)
  enrollments   Enrollment[] // Courses they're enrolled in (students)
  lessonProgress LessonProgress[]
  certificates  Certificate[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  fileKey     String
  price       Float
  duration    Int
  level       CourseLevel @default(BEGINNER)
  
  category    String
  smallDescription String
  slug        String @unique

  status CourseStatus @default(DRAFT)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  modules     Module[]
  enrollments Enrollment[] // Students enrolled in this course
  certificates Certificate[]
}

model Module {
  id        String   @id @default(uuid())
  title     String
  description String?
  order     Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  
  @@index([courseId, order])
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  content     String   // Rich text content
  videoUrl    String?  // Optional video URL
  duration    Int?     // Duration in minutes
  order       Int
  isPublished Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    LessonProgress[] // Student progress on this lesson
  
  @@index([moduleId, order])
}

// NEW MODELS FOR ENROLLMENT AND PROGRESS TRACKING

model Enrollment {
  id            String   @id @default(uuid())
  userId        String
  courseId      String
  enrolledAt    DateTime @default(now())
  completedAt   DateTime?
  progress      Float    @default(0) // 0-100 percentage
  isActive      Boolean  @default(true)
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId]) // Prevent duplicate enrollments
  @@index([userId])
  @@index([courseId])
}

model LessonProgress {
  id            String   @id @default(uuid())
  userId        String
  lessonId      String
  isCompleted   Boolean  @default(false)
  timeSpent     Int      @default(0) // Time spent in minutes
  completedAt   DateTime?
  startedAt     DateTime @default(now())
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson        Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId]) // One progress record per user per lesson
  @@index([userId])
  @@index([lessonId])
}

model Certificate {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  issuedAt    DateTime @default(now())
  certificateUrl String? // Link to generated certificate
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId]) // One certificate per user per course
  @@index([userId])
  @@index([courseId])
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}